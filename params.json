{"name":"Building a web application with Mojolicious and Ember-CLI.","tagline":"6th February 2016","body":"This is the first part of a multi-part tutorial which will help you get started developing web applications using [Mojolicious](http://mojolicious.org) and [Ember-CLI](http://ember-cli.com). Ember is a JavaScript framework for creating ambitious web applications. Ember-CLI also ships with a data-persistence library called [ember-data](https://github.com/emberjs/data), which can communicate with a back-end API. We can use Mojolicious, a web framework written in Perl, to serve the API for ember-data to consume.\r\n\r\nTo understand why you would want to build a application with a this type of architecture, take a look at this page of [Mixu's single page app book](http://singlepageappbook.com/goal.html).\r\n\r\n## Tooling\r\n\r\nFirst we will run through the tooling that you will need on your development machine. Feel free to skip a section if you already have that tool installed. Each section has an explanation and the recommended commands to run. The commands assume that you are using OS X and may be slightly different if using Linux, and completely different if using Windows (sorry Windows users).\r\n\r\n### Homebrew\r\n\r\nA package manager for OS X. Whether you end up following this tutorial or not, [Homebrew](http://brew.sh) is a useful tool to have on your Mac.\r\n\r\n    $ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\r\n\r\n### Perl 5\r\n\r\nOS X comes with a system Perl 5 installation. However, since it's used for critical operating system tasks, it's best to leave that installation alone, and install Perl separately. I recommend the use of [Perlbrew](http://perlbrew.pl) to install and manage non-system Perl installations. Install Perlbrew, followed by the latest stable version of Perl 5.\r\n\r\n    # Install Perlbrew...\r\n    $ \\curl -L http://install.perlbrew.pl | bash\r\n    # *IMPORTANT* The output contains instructions on how to complete the installation.\r\n\r\n    # Install the latest stable version of Perl. This will take a while, go make a cup of tea...\r\n    $ perlbrew install stable\r\n\r\n    # Use the new installation. The version number will be visible in the output of the previous command.\r\n    $ perlbrew use 5.22.1\r\n\r\n    # Verify it worked...\r\n    $ perl -v\r\n    This is perl 5, version 22, subversion 1 (v5.22.1)...\r\n\r\n### cpanm\r\n\r\nFor installing modules (such as Mojolicious) from the CPAN, the tool of choice is [cpanm](https://github.com/miyagawa/cpanminus). If you're using Perlbrew, you should use the built in cpanm installer.\r\n\r\n    $ perlbrew install-cpanm\r\n\r\n### Node.js\r\n\r\nEmber-CLI uses the JavaScript runtime [Node.js](https://nodejs.org) and its accompanying package manager [npm](https://www.npmjs.com/) to perform certain tasks like installing add-ons and starting up a development server. For Perl, we used Perlbrew to manage our Perl installations, and similarly here we will use [nvm](https://github.com/creationix/nvm) to manage our Node installations. Install nvm, followed by the latest stable version of Node.\r\n\r\n    # Install nvm...\r\n    $ brew install nvm\r\n    # *IMPORTANT* The output contains instructions on how to complete the installation.\r\n\r\n    # Install the latest stable version of Node...\r\n    $ nvm install stable\r\n\r\n    # Did it work?...\r\n    $ node --version\r\n    v5.5.0\r\n\r\n### MySQL\r\n\r\nFor this tutorial we will use the relational database [MySQL](https://www.mysql.com) for our persistent storage.\r\n\r\n    $ brew update && brew install mysql\r\n\r\n    # Verify it worked...\r\n    $ mysql --version\r\n    mysql  Ver 14.14 Distrib 5.7.11, for osx10.10 (x86_64) using  EditLine wrapper\r\n\r\n### Ember-CLI\r\n\r\nNow let's install Ember-CLI itself, which can accomplish many tasks including installing dependencies, starting a development server, running tests, generating code and more.\r\n\r\n    $ npm install -g ember-cli\r\n\r\n    # Did it work?\r\n    $ ember --version\r\n    version: 1.13.15\r\n\r\nThe `-g` option instructs npm to install Ember-CLI globally (for the current Node version). This will allow us to run ember commands from the command line.\r\n\r\n### Mojolicious\r\n\r\nNext we'll install Mojolicious. Again, we want to install it globally (for the current Perl version).\r\n\r\n    $ cpanm Mojolicious\r\n\r\n    # Verify it worked...\r\n    $ mojo version\r\n    CORE\r\n      Perl        (v5.22.1, darwin)\r\n      Mojolicious (6.41, Clinking Beer Mugs)\r\n\r\n## Project Setup\r\n\r\nFor our application structure, let's aim to create something along the following lines:\r\n\r\n    music-app\r\n    |- ember\r\n    |- mojo\r\n\r\nCreate the base directory and cd into it. Note, `$_` is a special parameter in bash that holds the last parameter of the previous command.\r\n\r\n    ~/$ mkdir music-app && cd $_\r\n\r\nNow we will use the ember and mojo CLIs to generate their base application code. First, Ember:\r\n\r\n    # This will take a minute or so...\r\n    ~/music-app$ ember new music-app && mv $_ ember\r\n\r\nNext, Mojolicious:\r\n\r\n    ~/music-app$ mojo generate app MusicApp && mv music_app mojo\r\n\r\nTo confirm it worked, list the contents of the directory.\r\n\r\n    ~/music-app$ ls -p\r\n    ember/ mojo/\r\n\r\n## Start Your Engines\r\n\r\nWe haven't written any code at this point, but we should still be able to start the front-end and back-end development servers. Mojolicious ships with a development web server called [morbo](http://mojolicious.org/perldoc/morbo). At this point you may wish to start up a couple of terminals - one for each server.\r\n\r\n    # Start the back-end...\r\n    ~/music-app$ cd mojo && morbo script/music_app\r\n    Server available at http://127.0.0.1:3000\r\n\r\n    # In another terminal, start the front-end...\r\n    ~/music-app$ cd ember && ember serve --proxy=http://127.0.0.1:3000\r\n    version: 1.13.15\r\n    Proxying to http://127.0.0.1:3000\r\n    Livereload server on http://localhost:49152\r\n    Serving on http://localhost:4200/\r\n\r\nNote that when we started the front-end server, we proxied back-end requests to the address of the back-end server.\r\n\r\nTo confirm everything is working as expected, navigate to [http://localhost:3000](http://localhost:3000) and [http://localhost:4200](http://localhost:4200) in your browser. You should see welcome screens for both endpoints which means your servers are running.\r\n\r\nWow, that was a lot, but we now have everything in place to start writing some actual code! In the next blog post, which is coming very soon, we will do just that.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}