{"name":"Building an Ember App with Perl, Mojolicious and DBIx::Class","tagline":"","body":"This is the first part of a multi-part tutorial which will help you get started developing web application using Perl 5 and Ember.js.\r\n\r\n## Tooling\r\n\r\nFirst we will run through the tooling that you'll need on your development machine. Each section has an explanation and the recommended commands to run. This section assumes you are using either Linux or OSX.\r\n\r\n### Perl 5\r\n\r\nLinux and OSX come with a system Perl 5 installation. However, since it's used for critical operating system tasks, it's best to leave it alone, and install Perl separately. I recommend the use of [Perlbrew](http://perlbrew.pl) to install and manage non-system Perl installations. Once you have installed Perlbrew, install the latest stable version of Perl 5. Stable versions have an even number as the minor release, for example, 5.22.1 is stable, 5.23.7 is not.\r\n\r\n#### Quick start\r\n\r\n    $ \\curl -L http://install.perlbrew.pl | bash\r\n\r\n    $ perlbrew install 5.22.1\r\n\r\n### cpanm\r\n\r\nFor installing modules from the CPAN, the tool of choice is [cpanm](https://github.com/miyagawa/cpanminus). If you're using Perlbrew, you should use the built in cpanm installer.\r\n\r\n#### Quick start\r\n\r\n    $ perlbrew install-cpanm\r\n\r\n### Node.js\r\n\r\nEmber-CLI uses the JavaScript runtime [Node.js](https://nodejs.org) and its accompanying package manager [npm](https://www.npmjs.com/) to perform certain tasks like installing add-ons and starting up a development server. For Perl, we used Perlbrew to manage our Perl installations, and similarly here we will use [nvm](https://github.com/creationix/nvm) to manage our Node installations. Install it and the latest stable version of Node.\r\n\r\n    $ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash\r\n\r\n    $ nvm install v5.5.0\r\n\r\n### Designer Templates\r\nWe’ve crafted some handsome templates for you to use. Go ahead and click 'Continue to layouts' to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved.\r\n\r\n### Creating pages manually\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Some code\r\n````javascript\r\nfunction() {\r\n  const hello = \"World\";\r\n}\r\n````\r\n\r\n````perl\r\nsub hello {\r\n  return \"World\";\r\n}\r\n````\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor’s GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and we’ll help you sort it out.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}